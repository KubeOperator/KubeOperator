- name: 下载 govc 二进制
  copy: src={{ base_dir }}/bin/{{ item }} dest={{ bin_dir }}/{{ item }} mode=0755
  with_items:
    - govc

- name: prepare vsphere.conf
  template: src=vsphere/vsphere.conf.j2 dest=/usr/local/bin/vsphere.conf

- name: prepare setup.sh
  template: src=vsphere/setup.sh.j2 dest=/tmp/setup.sh

- name: set disk.enableuuid to true for all vms
  shell: "bash setup.sh"
  args:
    chdir: "/tmp"
  run_once: true

- name: modify apiserver and controller-manager services on master node
  lineinfile:
    path: "{{ item.key }}"
    insertbefore: "--v=2"
    line: "{{ item.value }}"
  with_items:
    - { key: '/etc/systemd/system/kube-apiserver.service', value: '  --cloud-provider=vsphere \'}
    - { key: '/etc/systemd/system/kube-controller-manager.service', value: '  --cloud-provider=vsphere \'}
    - { key: '/etc/systemd/system/kube-apiserver.service', value: '  --cloud-config=/usr/local/bin/vsphere.conf \'}
    - { key: '/etc/systemd/system/kube-controller-manager.service', value: '  --cloud-config=/usr/local/bin/vsphere.conf \'}

- name: modify kubelet services on worker node
  lineinfile:
    path: "/etc/systemd/system/kubelet.service"
    insertbefore: "--v=2"
    line: '  --cloud-provider=vsphere \'
  delegate_to: "{{ item }}"
  with_items: "{{ groups['kube-node'] }}"
  run_once: true

- name: modify kubelet services on master node
  lineinfile:
    path: "/etc/systemd/system/kubelet.service"
    insertbefore: "--v=2"
    line: '  --cloud-provider=vsphere \'

- name: restart node kubelet service
  shell: "systemctl daemon-reload && systemctl restart kubelet"
  delegate_to: "{{ item }}"
  with_items: "{{ groups['kube-node'] }}"
  run_once: true

- name: restart master kubelet service
  shell: "systemctl daemon-reload && systemctl restart kubelet"

- name: restart apiserver and controller-manager service
  shell: "systemctl daemon-reload && systemctl restart kube-controller-manager && \
    systemctl restart kube-apiserver"

- block:
    - name: prepare vsan default storageclass file
      template:
        src: vsphere/default-sc.yaml.j2
        dest: "/tmp/default-sc.yaml"

    - name: create vsan default storageclass
      shell: "kubectl apply -f /tmp/default-sc.yaml"
      ignore_errors: true

    - name: 设置default storageClass
      shell: "{{ bin_dir }}/kubectl patch storageclass '{{ storageClassName }}' -p '{{default_label}}'"
  delegate_to: "{{ groups['kube-master'][0] }}"
  run_once: true
